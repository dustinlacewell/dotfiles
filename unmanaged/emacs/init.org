#+title: ldlework's init.el
#+description: A literate programming style exposition of my Emacs configuration
#+language: en
#+startup: overview indent align
#+babel: :cache no
#+Options: ^:nil num:nil tags:nil
#+html_head: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+html_head: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+html_head: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+html_head: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+html_head: <script type="text/javascript" src="https://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+html_head: <script type="text/javascript" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>
#+html_head: <script type="text/" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>
#+PROPERTY: header-args    :tangle yes

* setup

The following sections take care of bootstrapping =straight.el= for
package-management and some other concerns before things can get started.

** lexical binding

This line controls how the elisp scoping works in the rest of the file. Lexical
binding is explained in the documentation.

#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src

** straight.el
[[https://github.com/raxod502/straight.el][straight.el]] is an alternative to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html][package.el]] with many advantages including the
ability to integrate with [[https://github.com/jwiegley/use-package][use-package]] and installing packages from git or
github.

*** bootstrap
#+begin_src emacs-lisp
  (let ((bootstrap-file (concat user-emacs-directory "straight/repos/straight.el/bootstrap.el"))
        (bootstrap-version 3))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

*** use-package integration
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (straight-use-package 'use-package)
  (use-package git) ;; ensure we can install from git sources
#+end_src

** general dependencies

The following package dependencies are used throughout the rest of the
configuration. They provide contemporary APIs for working with various elisp
data structures.

#+begin_src emacs-lisp
  (require 'cl)
  (use-package f :demand t)          ;; files
  (use-package dash :demand t)       ;; lists
  (use-package ht :demand t)         ;; hash-tables
  (use-package s :demand t)          ;; strings
  (use-package a :demand t)          ;; association lists
  (use-package anaphora :demand t)   ;; anaphora
  ;; (eval `(use-package ecl :demand t :straight (ecl :type git :local-repo ,(my/project-directory "ecl"))))

#+end_src

** linux paths
#+begin_src emacs-lisp
  (when (string-equal system-type "gnu/linux")
    (defvar my/home-directory (expand-file-name "~/"))
    (defvar my/data-directory (concat my/home-directory ".emacs.d/"))
    (defvar my/projects-directory (concat my/home-directory "src/"))
    (defvar my/sources-directory (concat my/home-directory "ext/"))
    (defvar my/org-directory (concat my/home-directory "org/"))
    (defvar my/yas-directory (concat my/data-directory "yas/")))
#+end_src

** windows paths
#+begin_src emacs-lisp
  (when (string-equal system-type "windows-nt")
    (defvar my/home-directory (expand-file-name "b:/"))
    (defvar my/data-directory (concat my/home-directory "Emacs/"))
    (defvar my/projects-directory (concat my/home-directory "Projects/"))
    (defvar my/sources-directory (concat my/home-directory "Sources/"))
    (defvar my/org-directory (concat my/home-directory "Syncthing/Org/"))
    (defvar my/yas-directory (concat my/data-directory "Yas/"))
    (setq linkmarks-file (concat my/org-directory "bookmarks.org")))
#+end_src

** utility functions

The next series of functions help compute various paths and filenames that are
used throughout the rest of the configuration.

*** my/org-file-name
#+begin_src emacs-lisp
  (defun my/org-file-name (file-name)
    "Create file-name relative to my/org-directory"
    (concat my/org-directory file-name))
#+end_src

*** my/notes-file-name
#+begin_src emacs-lisp
  (defvar my/notes-file-name
    (my/org-file-name "notes.org")
    "Main notes file-name")
#+end_src

*** my/bookmarks-file-name
#+begin_src emacs-lisp
  (defvar my/bookmarks-file-name
    (my/org-file-name "bookmarks.org")
    "Main bookmarks file-name")
#+end_src

*** my/template-directory
#+begin_src emacs-lisp
  (setq-default my/template-directory (concat my/org-directory "templates/"))
#+end_src

*** my/template-file-name
#+begin_src emacs-lisp
  (defun my/template-file-name (file-name)
    "Create file-name relative to my/template-directory"
    (concat my/template-directory file-name))
#+end_src

*** my/project-directory
#+begin_src emacs-lisp
  (defun my/project-directory (name)
    (concat my/projects-directory name))
#+end_src

*** my/source-directory
#+begin_src emacs-lisp
  (defun my/source-directory (name)
    (concat my/sources-directory name))
#+end_src

*** setup external browser
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-chrome)
  (setq browse-url-chrome-program "qutebrowser")
#+end_src

* aesthetics
** vertical border
#+begin_src emacs-lisp
  (set-face-foreground 'vertical-border "gray")
#+end_src

** blend in the fringes
#+begin_src emacs-lisp
  (set-face-attribute 'fringe nil :background nil)
#+end_src

* core
The following sections customize core Emacs settings.
** autosaves
Auto-save will periodically save files to backup while you editing. This is
great if something goes catastrophically wrong to Emacs!
*** autosave every buffer that visits a file
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default t)
#+END_SRC

*** save every 20 secs or 20 keystrokes
#+BEGIN_SRC emacs-lisp
  (setq auto-save-timeout 20
        auto-save-interval 20)
#+END_SRC

*** store autosaves in a single place
#+BEGIN_SRC emacs-lisp
  (defvar emacs-autosave-directory
    (expand-file-name (concat user-emacs-directory "autosaves/")))

  (unless (file-exists-p emacs-autosave-directory)
      (make-directory emacs-autosave-directory))

  (setq auto-save-file-name-transforms
        `((".*" ,emacs-autosave-directory t)))
#+END_SRC

** backups
Backups are created everytime a buffer is saved. This is really useful
for recovering work that takes place between version-control commits
or on unversioned files.
*** store backups with the autosaves
#+BEGIN_SRC emacs-lisp
  ;; (setq backup-directory-alist `(("." . ,emacs-autosave-directory)))
  (setq backup-directory-alist nil)
#+END_SRC

*** keep 10 backups
#+BEGIN_SRC emacs-lisp
  (setq kept-new-versions 10
        kept-old-verisons 0)
#+END_SRC

*** delete old backups
#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t)
#+END_SRC

*** copy files to avoid various problems
#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t)
#+END_SRC

*** backup files even if version controlled
#+BEGIN_SRC emacs-lisp
  (setq vc-make-backup-files t)
#+END_SRC

** cursor
*** box style
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'box)
#+END_SRC

*** blinking
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 1)
#+END_SRC

** disable
Turn off various UI features to achieve a minimal, distraction free
experience. Additionally, all configuration should live inside
version-controlled files so the Emacs customizations file is also disabled.
*** menubar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

*** toolbar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

*** scrollbar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

*** startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
        initial-scratch-message nil)
#+END_SRC

*** customizations file
#+BEGIN_SRC emacs-lisp
  (setq custom-file (make-temp-file ""))
#+END_SRC

** editing
*** use spaces
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

*** visual fill-column
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :config (global-visual-fill-column-mode))
#+end_src

*** fill at 79
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 79)
#+END_SRC

*** autofill text-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

*** ssh for tramp
Default method for transferring files with Tramp.
#+begin_src emacs-lisp
  (setq tramp-default-method "ssh")
#+end_src

** key-bindings
*** meta n & p
#+begin_src emacs-lisp
  (global-set-key (kbd "M-p") 'backward-paragraph)
  (global-set-key (kbd "M-n") 'forward-paragraph)
#+end_src

** minor-modes
*** whitespace-mode
Visually displays trailing whitespace.
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :diminish global-whitespace-mode
    :init
    (setq whitespace-style
          '(face tabs newline trailing tab-mark space-before-tab space-after-tab))
    (global-whitespace-mode 1))
#+END_SRC

*** prettify-symbols-mode
Various symbols will be replaced with nice looking unicode glyphs.
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
#+END_SRC

*** electric-pair-mode
Matching closed brackets are inserted for any typed open bracket.
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC

*** rainbow-delimeters-mode
#+BEGIN_SRC emacs-lisp
  (require 'color)
  (defun gen-col-list (length s v &optional hval)
    (cl-flet ( (random-float () (/ (random 10000000000) 10000000000.0))
            (mod-float (f) (- f (ffloor f))) )
      (unless hval
        (setq hval (random-float)))
      (let ((golden-ratio-conjugate (/ (- (sqrt 5) 1) 2))
            (h hval)
            (current length)
            (ret-list '()))
        (while (> current 0)
          (setq ret-list
                (append ret-list
                        (list (apply 'color-rgb-to-hex (color-hsl-to-rgb h s v)))))
          (setq h (mod-float (+ h golden-ratio-conjugate)))
          (setq current (- current 1)))
        ret-list)))

  (defun set-random-rainbow-colors (s l &optional h)
    ;; Output into message buffer in case you get a scheme you REALLY like.
    ;; (message "set-random-rainbow-colors %s" (list s l h))
    (interactive)
    (rainbow-delimiters-mode t)

    ;; Show mismatched braces in bright red.
    (set-face-background 'rainbow-delimiters-unmatched-face "red")

    ;; Rainbow delimiters based on golden ratio
    (let ( (colors (gen-col-list 9 s l h))
           (i 1) )
      (let ( (length (length colors)) )
        ;;(message (concat "i " (number-to-string i) " length " (number-to-string length)))
        (while (<= i length)
          (let ( (rainbow-var-name (concat "rainbow-delimiters-depth-" (number-to-string i) "-face"))
                 (col (nth i colors)) )
            ;; (message (concat rainbow-var-name " => " col))
            (set-face-foreground (intern rainbow-var-name) col))
          (setq i (+ i 1))))))

  (use-package rainbow-delimiters :commands rainbow-delimiters-mode :hook ...
    :init
    (setq rainbow-delimiters-max-face-count 16)
    (set-random-rainbow-colors 0.6 0.7 0.5)
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

*** show-paren-mode
#+begin_src emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-delay 0)
  (require 'paren)
  (set-face-background 'show-paren-match nil)
  (set-face-background 'show-paren-mismatch nil)
  (set-face-foreground 'show-paren-match "#ff0")
  (set-face-foreground 'show-paren-mismatch "#f00")
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
#+end_src

*** which-key-mode
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    ;; sort single chars alphabetically P p Q q
    (setq which-key-sort-order 'which-key-key-order-alpha)
    (setq which-key-idle-delay 0.8)
    (which-key-mode))
#+END_SRC

*** company-mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** shorten prompts
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** eyeliner for modeline
#+begin_src emacs-lisp
  ;; (defun set-eyeliner-colors ()
  ;;   (setq buffer-name-color "#ff0000")
  ;;   (setq buffer-name-modified-color "#ff0000")
  ;;   (setq eyeliner/warm-color (theme-color 'red))
  ;;   (setq eyeliner/cool-color (theme-color 'cyan))
  ;;   (setq eyeliner/plain-color (theme-color 'foreground))
  ;;   (custom-set-faces
  ;;    `(powerline-active0
  ;;      ((t (:background ,(theme-color 'foreground)))))
  ;;    `(powerline-inactive0
  ;;      ((t (:background ,(theme-color 'foreground)))))
  ;;    `(powerline-active1
  ;;      ((t (:background ,(theme-color 'foreground)
  ;;                       :foreground ,(theme-color 'background)))))
  ;;    `(powerline-inactive1
  ;;      ((t (:background ,(theme-color 'foreground)
  ;;                       :foreground ,(theme-color 'background)))))
  ;;    `(powerline-active2
  ;;      ((t (:background ,(theme-color 'background)))))
  ;;    `(powerline-inactive2
  ;;      ((t (:background ,(theme-color 'background)))))))

  ;; (eval `(use-package eyeliner
  ;;    ;; :straight (eyeliner :type git :host github :repo "dustinlacewell/eyeliner")
  ;;    :demand t
  ;;    :straight (eyeliner :local-repo ,(my/project-directory "eyeliner"))
  ;;    :config
  ;;    (spaceline-helm-mode 1)
  ;;    (set-eyeliner-colors)
  ;;    (eyeliner/install)))
#+end_src

** debug on error
#+begin_src emacs-lisp
  (setq debug-on-error t)
#+end_src

* helpful
#+begin_src emacs-lisp
(use-package helpful :straight (helpful :type git :host github :repo "Wilfred/helpful"))

(use-package helpful
    :straight (helpful :type git :host github :repo "Wilfred/helpful")
    :bind (("C-h f" . #'helpful-callable)
           ("C-h v" . #'helpful-variable)
           ("C-h k" . #'helpful-key)))
#+end_src

* org-mode
** straight.el fixes
There are some issues with straight.el and org. These the following boilerplate
fixes all that until [[https://github.com/raxod502/straight.el#installing-org-with-straightel][that is resolved]].
*** fix-org-git-version
#+begin_src emacs-lisp
  (defun fix-org-git-version ()
    "The Git version of org-mode.
    Inserted by installing org-mode or when a release is made."
    (require 'git)
    (let ((git-repo (expand-file-name
                     "straight/repos/org/" user-emacs-directory)))
      (string-trim
       (git-run "describe"
                "--match=release\*"
                "--abbrev=6"
                "HEAD"))))
#+end_src

*** fix-org-release
#+begin_src emacs-lisp
  (defun fix-org-release ()
    "The release version of org-mode.
    Inserted by installing org-mode or when a release is made."
    (require 'git)
    (let ((git-repo (expand-file-name
                     "straight/repos/org/" user-emacs-directory)))
      (string-trim
       (string-remove-prefix
        "release_"
        (git-run "describe"
                 "--match=release\*"
                 "--abbrev=0"
                 "HEAD")))))
#+end_src

** installation
#+begin_src emacs-lisp
  (use-package org
    :demand t
    :mode ("\\.org\\'" . org-mode)
    :config
    ;; these depend on the 'straight.el fixes' above
    (defalias #'org-git-version #'fix-org-git-version)
    (defalias #'org-release #'fix-org-release)
    (require 'org-habit)
    (require 'org-capture)
    (require 'org-tempo))
#+end_src

** security
#+begin_src emacs-lisp
  (progn
    (setq org-confirm-babel-evaluate nil)
    (setq org-confirm-elisp-link-function nil)
    (setq org-confirm-shell-link-function nil))
#+end_src

** look
The following sections change how Org-mode documents look.
*** indent by header level
Hide the heading asterisks. Instead indent headings based on depth.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-hook 'org-mode-hook #'org-indent-mode))
#+end_src

*** pretty heading bullets
Use nice unicode bullets instead of the default asterisks.
#+begin_src emacs-lisp
  (use-package org-bullets
    :after (org)
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+end_src

*** pretty priority cookies
Instead of the default =[#A]= and =[#C]= priority cookies, use little unicode arrows to
indicate high and low priority. =[#B]=, which is the same as no priority, is shown as
normal.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (defun nougat/org-pretty-compose-p (start end match)
      (if (or (string= match "[#A]") (string= match "[#C]"))
          ;; prettify asterisks in headings
          (org-match-line org-outline-regexp-bol)
        ;; else rely on the default function
        (funcall #'prettify-symbols-default-compose-p start end match)))

    (global-prettify-symbols-mode)

    (add-hook
     'org-mode-hook
     (lambda ()
       (setq-local prettify-symbols-compose-predicate #'nougat/org-pretty-compose-p)
       (setq-local prettify-symbols-alist
                   (todo-prettify-symbols-alist todo-keywords)))))
#+end_src

*** pretty heading ellipsis
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-ellipsis " ▿"))
#+end_src

*** dynamic tag position
#+begin_src emacs-lisp
  (defun org-realign-tags ()
    (interactive)
    (setq org-tags-column (- 0 (window-width)))
    (org-align-tags t))

  (add-hook 'window-configuration-change-hook 'org-realign-tags)
#+end_src

** feel
The following sections change how it feels to use Org-mode.
*** don't fold blocks on open
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-hide-block-startup nil))
#+end_src

*** auto-fill paragraphs
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-hook 'org-mode-hook 'turn-on-auto-fill))
#+end_src

*** respect content on heading insert
If you try to insert a heading in the middle of an entry, don't split it in half, but
instead insert the new heading after the end of the current entry.

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-insert-heading-respect-content nil))
#+end_src

*** ensure one-line between headers
When you save, this section will ensure that there is a one-line space between each
heading. This helps with the background color of code-blocks not showing up on folded
headings.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (defun org-mode--ensure-one-blank-line ()
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "#\\+[a-z_]+\\s-\\*" nil t)
          (replace-match "#+end_src

  ,*")
          (call-interactively 'org-previous-visible-heading)
          (call-interactively 'org-cycle)
          (call-interactively 'org-cycle))
        (org-save-outline-visibility t
          (org-mode))))

    (add-hook
     'org-mode-hook
     (lambda () (add-hook
                 'before-save-hook
                 'org-mode--ensure-one-blank-line
                 nil 'make-it-local))))
#+end_src

*** initial visibility
#+begin_src emacs-lisp
  (setq org-startup-folded 'content)
#+end_src

** todo states
#+begin_src emacs-lisp
  (setq todo-keywords
        ;; normal workflow
        '((("TODO" "t"
            :icon "… "
            :face org-todo-face)

           ("DOING" "d"
            :icon "🏃"
            :face org-doing-face)

           ("DONE" "D"
            :icon "✓ "
            :face org-done-face
            :done-state t))

          ;; auxillary states
          (("SOON" "s"
            :icon "❗ "
            :face org-soon-face)

           ("SOMEDAY" "S"
            :icon "🛌"
            :face org-doing-face))))


  ;; parsing

  (defun todo-make-state-model (name key props)
    (append (list :name name :key key) props))

  (defun todo-parse-state-data (state-data)
    (-let* (((name second &rest) state-data)
            ((key props) (if (stringp second)
                             (list second (cddr state-data))
                           (list nil (cdr state-data)))))
      (todo-make-state-model name key props)))

  (defun todo-make-sequence-model (states)
    (mapcar 'todo-parse-state-data states))

  (defun todo-parse-sequences-data (sequences-data)
    (mapcar 'todo-make-sequence-model sequences-data))


  ;; org-todo-keywords

  (defun todo-keyword-name (name key)
    (if key (format "%s(%s)" name key) name))

  (defun todo-keyword-name-for-state (state)
    (todo-keyword-name (plist-get state :name)
                       (plist-get state :key)))

  (defun todo-is-done-state (state)
    (equal t (plist-get state :done-state)))

  (defun todo-is-not-done-state (state)
    (equal nil (plist-get state :done-state)))

  (defun todo-org-sequence (states)
    (let ((active (seq-filter 'todo-is-not-done-state states))
          (inactive (seq-filter 'todo-is-done-state states)))
      (append '(sequence)
              (mapcar 'todo-keyword-name-for-state active)
              '("|")
              (mapcar 'todo-keyword-name-for-state inactive))))

  (defun todo-org-todo-keywords (sequences)
    (mapcar 'todo-org-sequence (todo-parse-sequences-data sequences)))
  ;; (todo-org-todo-keywords todo-keywords)


  (with-eval-after-load 'org
    (setq org-todo-keywords (todo-org-todo-keywords todo-keywords)))


  (defun todo-org-todo-keyword-faces (sequences)
    (cl-loop for sequence in (todo-parse-sequences-data sequences)
             append (cl-loop for state in sequence
                             for name = (plist-get state :name)
                             for face = (plist-get state :face)
                             collect (cons name face))))
  ;; (todo-org-todo-keyword-faces todo-keywords)

  (with-eval-after-load 'org
    (setq org-todo-keyword-faces (todo-org-todo-keyword-faces todo-keywords)))

  (defun todo-prettify-symbols-alist (sequences)
    (cl-loop for sequence in (todo-parse-sequences-data sequences)
             append (cl-loop for state in sequence
                             for name = (plist-get state :name)
                             for icon = (plist-get state :icon)
                             collect (cons name icon))))
  ;; (todo-prettify-symbols-alist todo-keywords)

  (defun todo-finalize-agenda-for-state (state)
    (-let (((&plist :name :icon :face) state))
      (beginning-of-buffer)
      (while (search-forward name nil 1)
        (let* ((line-props (text-properties-at (point)))
               (line-props (ecl-plist-remove line-props 'face)))
          (call-interactively 'set-mark-command)
          (search-backward name)
          (call-interactively 'kill-region)
          (let ((symbol-pos (point)))
            (insert icon)
            (beginning-of-line)
            (let ((start (point))
                  (end (progn (end-of-line) (point))))
              (add-text-properties start end line-props)
              (add-face-text-property symbol-pos (+ 1 symbol-pos) face))))))
    (beginning-of-buffer)
    (replace-regexp "[[:space:]]+[=]+" ""))

  (defun todo-finalize-agenda ()
    (--each (todo-parse-sequences-data todo-keywords)
      (-each it 'todo-finalize-agenda-for-state)))

  (add-hook 'org-agenda-finalize-hook 'todo-finalize-agenda)
#+end_src

** org-modules
#+begin_src emacs-lisp

#+end_src

** org-babel
*** add languages to babel
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)
       (emacs-lisp . t))))
#+end_src

*** set default header args
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-babel-default-header-args
          '((:session . "none")
            (:results . "silent")
            (:exports . "code")
            (:cache . "no")
            (:noweb . "no")
            (:hlines . "no")
            (:tangle . "no"))))
#+end_src

*** disable code evaluation prompts
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-confirm-babel-evaluate nil)
    (setq org-confirm-shell-link-function nil)
    (setq org-confirm-elisp-link-function nil))
#+END_SRC

** org-helm
#+begin_src emacs-lisp
  (use-package helm-org)
#+end_src

** org-projectile
#+begin_src emacs-lisp
  (use-package org-projectile
    :config
    (progn
      (org-projectile-per-project)
      (setq org-projectile-per-project-filepath "notes.org")
      (add-to-list 'org-capture-templates
                   (org-projectile-project-todo-entry
                    :capture-character "l"
                    :capture-heading "Linked Project TODO"))
      (add-to-list 'org-capture-templates
                   (org-projectile-project-todo-entry
                    :capture-character "p"))
      (setq org-confirm-elisp-link-function nil)))

  (use-package org-projectile-helm
    :after org-projectile
    :bind (("C-c n p" . org-projectile-helm-template-or-project)))
#+end_src

** org-capture
*** set default notes file
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-default-notes-file (my/org-file-name "inbox.org")))
#+end_src

*** bind a key for capture
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (global-set-key (kbd "C-c c") 'org-capture))
#+end_src

*** automatically visit new capture
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (add-to-list 'org-capture-after-finalize-hook 'org-capture-goto-last-stored))
#+end_src

*** capture templates
#+begin_src emacs-lisp
#+end_src

** org-agenda
#+begin_src emacs-lisp
  (setq org-directory my/org-directory
        org-agenda-todo-keyword-format ""
        org-agenda-prefix-format '((todo . "  %(org-get-todo-state)"))
        org-agenda-files (-filter 'f-exists? (append
                                              (f-glob (my/org-file-name "*.org"))
                                              (f-glob (my/project-directory "*/*.org"))
                                              (f-glob (my/source-directory "*/*.org")))))

  (eval `(use-package org-super-agenda
           ;; :straight (org-super-agenda
           ;;            :local-repo ,(my/source-directory "org-super-agenda"))
           :config (org-super-agenda-mode)))

  (defun org-agenda-transformer (it)
    (-let* (((blank todo rest) (s-split-up-to
                                "[[:blank:]]+"
                                (substring-no-properties it) 2))
            (project-name (->> it
                               (get-text-property 0 'org-marker)
                               (marker-buffer)
                               (buffer-file-name)
                               (f-parent)
                               (f-base)))
            it)
      (format "  %s %s / %s" todo project-name rest)))

  (setq org-agenda-custom-commands
        (list
         (quote
          ("a" "agenda view"
           ((agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:name "Today"
                                  :time-grid t
                                  :date today
                                  :todo "TODAY"
                                  :scheduled today
                                  :order 1)))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:name "Active"
                                   :todo "DOING"
                                   :order 1
                                   :transformer (org-agenda-transformer it))
                            (:name "Important"
                                   :tag "Important"
                                   :priority "A"
                                   :order 6)
                            (:name "Due Today"
                                   :deadline today
                                   :order 2)
                            (:name "Overdue"
                                   :deadline past
                                   :order 7)
                            (:name "Assignments"
                                   :tag "Assignment"
                                   :order 10)
                            (:name "Issues"
                                   :tag "Issue"
                                   :order 12)
                            (:name "Done"
                                   :todo "DONE")
                            (:discard (:anything t))))))

            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:auto-group-map
                             (lambda (item)
                               (-when-let* ((marker (or (get-text-property 0 'org-marker item)
                                                        (get-text-property 0 'org-hd-marker item)))
                                            (file-path (->> marker marker-buffer buffer-file-name))
                                            (parent (f-dirname file-path))
                                            (type (f-dirname parent)))
                                 (when (equal "src" (f-filename type))
                                   (f-filename parent)))))
                            (:discard (:anything t))))))
            (alltodo "" ((org-agenda-overriding-header "")
                         (org-super-agenda-groups
                          '((:auto-group-map
                             (lambda (item)
                               (if (-contains? (get-text-property 0 'tags item) "mine")
                                   (-when-let* ((marker (or (get-text-property 0 'org-marker item)
                                                            (get-text-property 0 'org-hd-marker item)))
                                                (file-path (->> marker marker-buffer buffer-file-name))
                                                (parent (f-dirname file-path))
                                                (type (f-dirname parent)))
                                     ;; TODO this wont work on windows, use variables
                                     (when (equal "ext" (f-filename type))
                                       (f-filename parent))))))
                            (:discard (:anything t)))))))))))

#+end_src

** linkmarks
#+begin_src emacs-lisp
  (eval `(use-package linkmarks
           :straight (linkmarks :type git :host github :repo "dustinlacewell/linkmarks")
           ;; :straight (linkmarks :type git :local-repo ,(my/project-directory "linkmarks/") :files ("linkmarks.el"))
           ))
#+end_src

** outshine
Outshine provides org-mode like functionality in other files like elisp source.
#+begin_src emacs-lisp
  (use-package outshine
    :init (defvar outline-minor-mode-prefix "\M-#")
    :config (setq outshine-use-speed-commands t)
    :hook ((emacs-lisp-mode . outshine-mode) (nix-mode . outshine-mode)))
#+end_src

** org-ql
#+begin_src emacs-lisp
  (eval `(use-package org-ql
           :demand t
           :straight (org-ql :type git :host github :repo "dustinlacewell/org-ql")
           ;; :straight (org-ql :type git :local-repo ,(my/source-directory "org-ql"))
           ))

  (eval `(use-package org-olp
           :demand t
           :straight (org-olp :type git :host github :repo "dustinlacewell/org-olp")
           ;; :straight (org-olp :type git :local-repo ,(my/project-directory "org-olp"))
           ))

  (defun get-candidates (filename query)
    (let* ((headlines (eval `(org-ql ,filename ,query)))
           (items (--map (plist-get it 'headline) headlines))
           (items (--sort (< (plist-get it :begin)
                             (plist-get other :begin)) items)))
      (cl-loop for item in items
               for olp = (with-temp-buffer
                           (insert-file-contents filename)
                           (org-mode)
                           (goto-char (plist-get item :begin))
                           (org-get-outline-path t))
               for label = (string-join olp " / ")
               collect (list label item))))

  ;; (get-candidates (my/org-file-name "notes.org") '(todo "TODO"))

  (defun select-candidate (filename query)
    (let* ((candidates (get-candidates filename query)))
      (car (helm :sources
                 (helm-build-sync-source "active-todos"
                   :candidates candidates
                   :fuzzy-match t)))))

  ;; (select-candidate (my/org-file-name "notes.org") '(todo "TODO"))

  (defun visit-candidate (filename query)
    (let ((selection (select-candidate filename query)))
      (find-file filename)
      (goto-char (plist-get selection :begin))
      (beginning-of-line)
      (call-interactively 'org-shifttab)
      (call-interactively 'org-cycle)))

  ;; (visit-candidate my/notes-file-name '(todo))
#+end_src

** i-read-this
#+begin_src emacs-lisp
  (defun i-read-this ()
    (interactive)
    (org-entry-add-to-multivalued-property nil "readby" user-login-name))
#+end_src

** don't prompt to confirm not prompting to confirm
#+begin_src emacs-lisp
(setq safe-local-variable-values '((org-confirm-elisp-link-function . nil)))
#+end_src

* projectile
[[https://github.com/bbatsov/projectile][Projectile]] offers a number of features related to project interaction. It can
track the root directories and sibling files of files you edit
automatically. Combined with Helm, you can very quickly navigate related files.

Projectile's default prefix is =C-c p=

#+begin_src emacs-lisp
  (use-package projectile
    :config
    (setq projectile-enable-caching t)
    (projectile-mode t))
#+end_src

** project discovery
Customize =nougat-project-root= to set the location of the majority of your
projects/repositories.
#+begin_src emacs-lisp
  (projectile-discover-projects-in-directory
   (file-name-as-directory my/projects-directory))
  (projectile-discover-projects-in-directory
   (file-name-as-directory my/sources-directory))
#+end_src

* helm
Helm is a fast completion/selection framework for Emacs. It pops up a buffer with
choices which you narrows by fuzzy search. This can be used for finding files,
switching buffers, etc.

The following keys are bound by default:

| default key | override symbol         | description                |
|-------------+-------------------------+----------------------------|
| M-x         | kbd-helm-M-x            | execute commands           |
| C-h f       | kbd-helm-apropos        | get help for any symbol    |
| C-x C-f     | kbd-helm-find-files     | find files                 |
| C-c y       | kbd-helm-show-kill-ring | view kill ring history     |
| C-x C-r     | kbd-helm-recentf        | open recently viewed files |

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :config
    (helm-mode 1)
    (require 'helm-config)

    (global-set-key (kbd "M-x") 'helm-M-x)
    (global-set-key (kbd "C-h f") 'helm-apropos)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "C-x b") 'helm-mini)
    (global-set-key (kbd "C-c y") 'helm-show-kill-ring)
    (global-set-key (kbd "C-x C-r") 'helm-recentf))
#+END_SRC

** ace-jump-helm-line
Use (=M-;= / =kbd-helm-ace-jump=) to show a unique letter combination next to each Helm
candidate. Pressing a combination instantly selects that candidate.
#+begin_src emacs-lisp
  (with-eval-after-load 'helm
    (use-package ace-jump-helm-line
      :commands ace-jump-helm-line
      :config (define-key helm-map
              (kbd "M-;")
              'ace-jump-helm-line)))
#+end_src

** helm-bookmarks
Use (=C-x C-b= / =kbd-helm-bookmarks=) to manage bookmarks with Helm.
#+begin_src emacs-lisp
  (with-eval-after-load 'helm
    (require 'helm-bookmark)
    (global-set-key (kbd "C-x C-b") 'helm-bookmark))
#+end_src

** helm-descbinds
Use (=C-h b= / =kbd-helm-descbinds=) to inspect current bindings with Helm.
#+begin_src emacs-lisp
  (use-package helm-descbinds
    :after (helm)
    :commands helm-descbinds
    :config
    (global-set-key (kbd "C-h b") 'helm-descbinds))
#+end_src

** helm-flyspell
With =flyspell-mode= on, use (=C-;= / =kbd-helm-flyspell=) after a word to correct it with
Helm.
#+begin_src emacs-lisp
  (use-package helm-flyspell
    :after (helm)
    :commands helm-flyspell-correct
    :config (global-set-key (kbd "C-;") 'helm-flyspell-correct))
#+end_src

** helm-org-rifle
Use (=M-r= / =kbd-helm-org-rifle=) to rifle through the current org-mode buffer or
all open org-mode buffers if one is not focused.
#+begin_src emacs-lisp
  (use-package helm-org-rifle
    :after (helm org)
    :commands helm-org-rifle-current-buffer
    :config
    (define-key org-mode-map (kbd "M-r") 'helm-org-rifle-current-buffer))
#+end_src

** helm-projectile
Use (=C-x c p= / =kbd-helm-projectile=) to view the buffers and files in the current
Projectile project.
#+begin_src emacs-lisp
  (use-package helm-projectile
      :after (helm projectile)
      :commands helm-projectile
      :config
      (global-set-key (kbd "C-x c p") 'helm-projectile))
#+end_src

** auto full frame
#+begin_src emacs-lisp
  (defvar helm-full-frame-threshold 0.75)

  (defun helm-full-frame-hook ()
    (let ((threshold (* helm-full-frame-threshold (x-display-pixel-height))))
      (setq helm-full-frame (< (frame-height) threshold))))

  (add-hook 'helm-before-initialize-hook 'helm-full-frame-hook)
#+end_src

** filter nix wrappers
#+begin_src emacs-lisp
(require 'helm-external)
(setq helm-external-commands-list
      (seq-filter (lambda (v) (not (string-match "^\\." v)))
                  (helm-external-commands-list-1 'sort)))
#+end_src

* magit
Use (=C-x g= / =kbd-magit-status=) to open the best front-end to Git there is!
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :demand t
    :config
    (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

** forge
#+begin_src emacs-lisp
  ;; (use-package closql)
  ;; (use-package forge
  ;;   :demand t
  ;;   :straight (forge :type git :host github :repo "magit/forge" :files ("lisp/*.el")))
#+end_src

* language support
** flycheck
#+begin_src emacs-lisp
  (use-package flycheck)
#+end_src

** elisp
*** context-help
Use (=C-c h= / =kbd-toggle-context-help=) to turn on a help-window that will
automatically update to display the help of the symbol before point.

#+begin_src emacs-lisp
  (defun toggle-context-help ()
    "Turn on or off the context help.
  Note that if ON and you hide the help buffer then you need to
  manually reshow it. A double toggle will make it reappear"
    (interactive)
    (with-current-buffer (help-buffer)
      (unless (local-variable-p 'context-help)
        (set (make-local-variable 'context-help) t))
      (if (setq context-help (not context-help))
          (progn
             (if (not (get-buffer-window (help-buffer)))
                 (display-buffer (help-buffer)))))
      (message "Context help %s" (if context-help "ON" "OFF"))))

  (defun context-help ()
    "Display function or variable at point in *Help* buffer if visible.
  Default behaviour can be turned off by setting the buffer local
  context-help to false"
    (interactive)
    (let ((rgr-symbol (symbol-at-point))) ; symbol-at-point http://www.emacswiki.org/cgi-bin/wiki/thingatpt%2B.el
      (with-current-buffer (help-buffer)
       (unless (local-variable-p 'context-help)
         (set (make-local-variable 'context-help) t))
       (if (and context-help (get-buffer-window (help-buffer))
           rgr-symbol)
         (if (fboundp  rgr-symbol)
             (describe-function rgr-symbol)
           (if (boundp  rgr-symbol) (describe-variable rgr-symbol)))))))

  (defadvice eldoc-print-current-symbol-info
    (around eldoc-show-c-tag activate)
    (cond
          ((eq major-mode 'emacs-lisp-mode) (context-help) ad-do-it)
          ((eq major-mode 'lisp-interaction-mode) (context-help) ad-do-it)
          ((eq major-mode 'apropos-mode) (context-help) ad-do-it)
          (t ad-do-it)))

  (global-set-key (kbd "C-c h") 'toggle-context-help)
#+end_src

*** lispy-mode
#+begin_src emacs-lisp
  (use-package lispy
    :config
    (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
    (add-hook 'lisp-interaction-mode-hook (lambda () (lispy-mode 1))))
#+end_src

** markdown-mode
All the internet uses it.
#+begin_src emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :config (setq markdown-command "multimarkdown"))
#+end_src

** python
*** elpy
#+begin_src emacs-lisp
  (use-package elpy)
#+end_src

** typescript
*** typescript-mode
#+begin_src emacs-lisp
    (use-package typescript-mode)
#+end_src

*** jsx
#+begin_src emacs-lisp
    (use-package web-mode
      :demand t
      :config
      (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (setq web-mode-engines-alist
            '(("django"    . "\\.html\\'")))
      (add-hook 'web-mode-hook
                (lambda ()
                  (when (string-equal "tsx" (file-name-extension buffer-file-name))
                    (setup-tide-mode))))
      ;; enable typescript-tslint checker
      (flycheck-add-mode 'typescript-tslint 'web-mode))

#+end_src

** yaml
*** yaml-mode
#+begin_src emacs-lisp
  (use-package yaml-mode
    :demand t
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

** web-mode
#+begin_src emacs-lisp
  (use-package less-css-mode)

  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode)))
#+end_src

** go-mode
#+begin_src emacs-lisp
  (use-package go-mode
    :config (add-hook 'go-mode-hook
                      (lambda ()
                        (add-hook 'before-save-hook 'gofmt-before-save)
                        (setq tab-width 4)
                        (setq indent-tabs-mode 1))))
#+end_src

** lojban
#+begin_src emacs-lisp
  ;; (eval `(use-package sutysisku
  ;;    :demand t
  ;;    :straight (sutysisku :local-repo ,(my/project-directory "sutysisku.el/"))))
#+end_src

* tooling support
** rec-mode
#+begin_src emacs-lisp
  (use-package rec-mode
    :straight (rec-mode :type git :repo "https://git.savannah.gnu.org/git/recutils.git" :files ("etc/rec-mode.el")))
#+end_src

*** support
#+begin_src emacs-lisp
  (defun rec-books-save-hook ()
    (message (buffer-name)))
#+end_src

** docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :demand t
    :config
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src

** nix
*** nix-mode
**** boilerplate
***** make-regexp
#+begin_src emacs-lisp
  (defun nix-mode-make-regexp (parts)
    (declare (indent defun))
    (string-join parts "\\|"))
#+end_src

***** search-backward
#+begin_src emacs-lisp
  (defun nix-mode-search-backward ()
    (re-search-backward nix-mode-combined-regexp nil t))
#+end_src

**** settings
#+begin_src emacs-lisp
  (setq nix-mode-caps '(" =[ \n]" "\(" "\{" "\\[" "\\bwith " "\\blet\\b" "\\binherit\\b"))
  (setq nix-mode-ends '(";" "\)" "\\]" "\}" "\\bin\\b"))
  (setq nix-mode-quotes '("''" "\""))
  (setq nix-mode-caps-regexp (nix-mode-make-regexp nix-mode-caps))
  (setq nix-mode-ends-regexp (nix-mode-make-regexp nix-mode-ends))
  (setq nix-mode-quotes-regexp (nix-mode-make-regexp nix-mode-quotes))
  (setq nix-mode-combined-regexp (nix-mode-make-regexp (append nix-mode-caps nix-mode-ends nix-mode-quotes)))
#+end_src

**** fixed-nix-indent
#+BEGIN_SRC emacs-lisp
  (defun fixed-nix-indent-expression-start ()
    (let* ((ends 0)
           (once nil)
           (done nil)
           (indent (current-indentation)))
      (save-excursion
        ;; we want to indent this line, so we don't care what it contains
        ;; skip to the beginning so reverse searching doesn't find any matches within
        (beginning-of-line)
        ;; search backward until an unbalanced cap is found or no cap or end is found
        (while (and (not done) (nix-mode-search-backward))
          (cond
           ((looking-at nix-mode-quotes-regexp)
            ;; skip over strings entirely
            (re-search-backward nix-mode-quotes-regexp nil t))
           ((looking-at nix-mode-ends-regexp)
            ;; count the matched end
            ;; this means we expect to find at least one more cap
            (setq ends (+ ends 1)))
           ((looking-at nix-mode-caps-regexp)
            ;; we found at least one cap
            ;; this means our function will return true
            ;; this signals to the caller we handled the indentation
            (setq once t)
            (if (> ends 0)
                ;; this cap corresponds to a previously matched end
                ;; reduce the number of unbalanced ends
                (setq ends (- ends 1))
              ;; no unbalanced ends correspond to this cap
              ;; this means we have found the expression that contains our line
              ;; we want to indent relative to this line
              (setq indent (current-indentation))
              ;; signal that the search loop should exit
              (setq done t))))))
      ;; done is t when we found an unbalanced expression cap
      (when done
        ;; indent relative to the indentation of the expression containing our line
        (indent-line-to (+ tab-width indent)))
      ;; return t to the caller if we found at least one cap
      ;; this signals that we handled the indentation
      once))
#+END_SRC

**** format
#+begin_src emacs-lisp
  (defun nix-mode-format ()
    "Format the entire nix-mode buffer"
    (interactive)
    (when (eq major-mode 'nix-mode)
      (save-excursion
        (beginning-of-buffer)
        (while (not (equal (point) (point-max)))
          (if (equal (string-match-p "^[\s-]*$" (thing-at-point 'line)) 0)
              (delete-horizontal-space)
            (nix-indent-line))
          (next-line)))))
#+end_src

**** install
#+begin_src emacs-lisp
  (eval `(use-package nix-mode
     ;; :straight (nix-mode :type git :local-repo ,(my/source-directory "nix-mode"))
                                          ;:straight (nix-mode :type git :host github :repo "NixOS/nix-mode")
     :config
     (add-to-list 'auto-mode-alist '("\\.nix?\\'" . nix-mode))
     (add-hook 'before-save-hook #'nix-mode-format)
     (define-key nix-mode-map (kbd "TAB") 'nix-indent-line)
     (setq nix-indent-function 'nix-indent-line)
     (defalias
       #'nix-indent-expression-start
       #'fixed-nix-indent-expression-start)))
#+end_src

*** nix-sandbox
#+begin_src emacs-lisp
  (use-package nix-sandbox)
#+end_src

* yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '(my/yas-directory))
    (yas-global-mode 1))
#+end_src

* org-brain
#+begin_src emacs-lisp
  (eval `(use-package org-brain
           :straight (org-brain :local-repo ,(my/source-directory "org-brain"))
           :config
           (setq org-id-track-globally t)
           (setq org-brain-visualize-default-choices 'all)
           (setq org-brain-title-max-length 12)
           (setq org-brain-include-file-entries t
                 org-brain-file-entries-use-title t)
           :bind (:map org-brain-visualize-mode-map
                       ;; Navigation
                       ("j" . backward-button)
                       ("k" . forward-button)
                       ("DEL" . org-brain-visualize-back)
                       ("C-p" . my/org-brain-visualize-parent)
                       ("C-n" . org-brain-visualize-child)

                       ;; Modification
                       ("i" . org-brain-pin)

                       ;; Relations
                       )))

  (defun my/org-brain-visualize-parent ()
    (interactive)
    (when (org-brain-parents (org-brain-entry-at-pt)) (org-brain-visualize-parent (org-brain-entry-at-pt))))

  (defun org-brain-visualize-child (entry &optional all)
    (interactive (list (org-brain-entry-at-pt)))
    (when (org-brain-children entry)
      (let* ((entries (if all (org-brain-children entry)
                      (org-brain--linked-property-entries
                       entry org-brain-children-property-name)))
           (child (cond
                   ((equal 1 (length entries)) (car-safe entries))
                   ((not entries) (error (concat entry " has no children")))
                   (t (org-brain-choose-entry "Goto child: " entries nil t)))))
      (org-brain-visualize child))))
#+end_src

* hydra

Hydra provides an easy way to create little pop-up interfaces with a collection of
related single-key bindings.

#+begin_src emacs-lisp
  (use-package hydra)
#+end_src

** pretty-hydra
[[https://github.com/jerrypnz/major-mode-hydra.el#pretty-hydra][Pretty-hydra]] provides a macro that makes it easy to get good looking Hydras.

#+begin_src emacs-lisp
  (use-package pretty-hydra
    :demand t
    :straight (pretty-hydra :type git :host github
                            :repo "jerrypnz/major-mode-hydra.el"
                            :branch "c6554ea"
                            :files ("pretty-hydra.el")))
#+end_src

** major-mode-hydra
[[https://github.com/jerrypnz/major-mode-hydra.el][Major-mode-hydra]] provides an macro for defining major-mode specific Hydras.

#+begin_src emacs-lisp
  (use-package major-mode-hydra
    :demand t
    :straight (major-mode-hydra :type git :host github
                                :repo "jerrypnz/major-mode-hydra.el"
                                :branch "c6554ea"
                                :files ("major-mode-hydra.el"))
    :config
    (global-set-key (kbd "C-<f19>") 'major-mode-hydra)
    (global-set-key (kbd "C-<f12>") 'major-mode-hydra))
#+end_src

** hera
[[https://github.com/dustinlacewell/hera][Hera]] provides for a few Hydra niceties including an API that allows your Hydras to
form a stack.

#+begin_src emacs-lisp
  (use-package hera
    :demand t
    :straight (hera :type git :host github :repo "dustinlacewell/hera"))
#+end_src

** nougat-hydra
This is the main macro for defining Hydras in Nougat.
#+begin_src emacs-lisp
  (defun nougat--inject-hint (symbol hint)
    (-let* ((name (symbol-name symbol))
            (hint-symbol (intern (format "%s/hint" name)))
            (format-form (eval hint-symbol))
            (string-cdr (nthcdr 1 format-form))
            (format-string (string-trim (car string-cdr)))
            (amended-string (format "%s\n\n%s" format-string hint)))
      (setcar string-cdr amended-string)))

  (defun nougat--make-head-hint (head default-color)
    (-let (((key _ hint . rest) head))
      (when key
        (-let* (((&plist :color color) rest)
                (color (or color default-color))
                (face (intern (format "hydra-face-%s" color)))
                (propertized-key (propertize key 'face face)))
          (format " [%s]: %s" propertized-key hint)))))

  (defun nougat--make-hint (heads default-color)
    (string-join
     (cl-loop for head in heads
              for hint = (nougat--make-head-hint head default-color)
              do (pp hint)
              collect hint) "\n"))

  (defun nougat--clear-hint (head)
    (-let* (((key form _ . rest) head))
      `(,key ,form nil ,@rest)))

  (defun nougat--add-exit-head (heads)
    (let ((exit-head '("SPC" (hera-pop) "to exit" :color blue)))
      (append heads `(,exit-head))))

  (defun nougat--add-heads (columns extra-heads)
    (let* ((cell (nthcdr 1 columns))
           (heads (car cell))
           (extra-heads (mapcar 'nougat--clear-hint extra-heads)))
      (setcar cell (append heads extra-heads))))

  (defmacro nougat-hydra (name body columns &optional extra-heads)
    (declare (indent defun))
    (-let* (((&plist :color default-color :major-mode mode) body)
            (extra-heads (nougat--add-exit-head extra-heads))
            (extra-hint (nougat--make-hint extra-heads default-color))
            (body (plist-put body :hint nil))
            (body-name (format "%s/body" (symbol-name name)))
            (body-symbol (intern body-name))
            (mode-support
             `(when ',mode
                (setq major-mode-hydra--body-cache
                      (a-assoc major-mode-hydra--body-cache ',mode ',body-symbol)))))
      (nougat--add-heads columns extra-heads)
      (when mode
        (remf body :major-mode))
      `(progn
         (pretty-hydra-define ,name ,body ,columns)
         (nougat--inject-hint ',name ,extra-hint)
         ,mode-support)))

  ;; (nougat-hydra hydra-test (:color red :major-mode fundamental-mode)
  ;;   ("First"
  ;;    (("a" (message "first - a") "msg a" :color blue)
  ;;     ("b" (message "first - b") "msg b"))
  ;;    "Second"
  ;;    (("c" (message "second - c") "msg c" :color blue)
  ;;     ("d" (message "second - d") "msg d"))))

#+end_src

** hydra-dwim
I have =<f12>= bound to caps-lock and =<f19>= as the key second-to-the-right of
spacebar. I use these for closing hydras.

#+begin_src emacs-lisp
  (defun my/hydra-dwim ()
    (interactive)
    (-let (((&alist major-mode mode) major-mode-hydra--body-cache))
      (if mode (major-mode-hydra)
        (hera-start 'hydra-default/body))))

  (setq kbd-hera-pop "<f12>")
  (global-set-key (kbd "<f13>") 'my/hydra-dwim)
  (global-set-key (kbd "<f12>") (lambda () (interactive) (hera-start 'hydra-default/body)))
#+end_src

** helm-org-bm
#+begin_src emacs-lisp
  (require 'seq)

  (defun helm-org-bm--element (regexp)
    (search-forward-regexp regexp)
    (next-line)
    (org-element-context))

  (defun helm-org-bm--format (element)
    (format "[[%s]]" (plist-get (nth 1 element) :raw-link)))

  (defun helm-org-bm--filter-candidates (canididates)
    (cl-loop for c in candidates
             for label = (nth 0 c)
             for regexp = (nth 2 c)
             for element = (helm-org-bm--element regexp)
             if (equal 'link (car element))
             collect (list label (helm-org-bm--format element))))

  (defun helm-org-bm--get-bookmarks ()
    (let* ((org-refile-targets '((nil :maxlevel . 99)))
           (candidates (org-refile-get-targets)))
      (helm-org-bm--filter-candidates candidates)))

  (defun helm-org-bm--pick-bookmark (targets)
    (let ((choice (completing-read ">" (mapcar 'car targets))))
      (seq-find (lambda (i) (string-equal choice (car i))) targets)))

  (defun helm-org-bm-bookmark ()
    (interactive)
    (save-excursion
      (with-temp-buffer
        (insert-file-contents (my/org-file-name "bookmarks.org"))
        (org-mode)
        (outline-show-all)
        (beginning-of-buffer)
        (let* ((targets (helm-org-bm--get-bookmarks))
               (choice (helm-org-bm--pick-bookmark targets))
               (org-link-frame-setup '((file . find-file)))
               (org-confirm-elisp-link-function nil))
          (org-open-link-from-string (cadr choice) (current-buffer))))))

  (defun helm-org-bm-capture ()
    (interactive)
    (let ((org-capture-entry helm-org-bm-entry))
      (setq org-refile-use-outline-path t)
      (setq org-outline-path-complete-in-steps nil)
      (setq org-refile-targets '((nil :maxlevel . 99)))
      (ignore-errors (org-capture))))

  (setq helm-org-bm-entry
        '("t" "Bookmark" entry (file (my/org-file-name "bookmarks.org"))
          "* %^{Title}\n[[%?]]\n  added: %U" '(:kill-buffer)))

  (setq helm-org-bm-actions
        '(("Open bookmark" . helm-org-bm--goto)
          ("Go to heading" . helm-org-goto-marker)
          ("Open in indirect buffer `C-c i'" .
           helm-org--open-heading-in-indirect-buffer)
          ("Refile heading(s) `C-c w`" .
           helm-org--refile-heading-to)
          ("Insert link to this heading `C-c l`" .
           helm-org-insert-link-to-heading-at-marker)))

  (nougat-hydra hydra-bookmarks (:color blue)
    ("Bookmarks" (("n" (helm-org-bm-capture) "new")
                  ("b" (helm-org-bm-bookmark) "bookmarks"))))
#+end_src

** major-mode hydra key
I have =<f19>= bound to the second-key right of spacebar. I use it to open any
available major-mode hydra.

#+begin_src emacs-lisp
  (global-set-key (kbd "<f19>") 'major-mode-hydra)
#+end_src

** hydra-help
Many of the Emacs help facilities at your fingertips!
#+begin_src emacs-lisp
  (nougat-hydra hydra-help (:color blue)
    ("Describe"
     (("c" describe-function "function")
      ("p" describe-package "package")
      ("m" describe-mode "mode")
      ("v" describe-variable "variable"))
     "Keys"
     (("k" describe-key "key")
      ("K" describe-key-briefly "brief key")
      ("w" where-is "where-is")
      ("b" helm-descbinds "bindings"))
     "Search"
     (("a" helm-apropos "apropos")
      ("d" apropos-documentation "documentation")
      ("s" info-lookup-symbol "symbol info"))
     "Docs"
     (("i" info "info")
      ("n" helm-man-woman "man")
      ("h" helm-dash "dash"))
     "View"
     (("e" view-echo-area-messages "echo area")
      ("l" view-lossage "lossage")
      ("c" describe-coding-system "encoding")
      ("I" describe-input-method "input method")
      ("C" describe-char "char at point"))))
#+end_src

** hydra-mark
#+begin_src emacs-lisp
  (defun unpop-to-mark-command ()
    "Unpop off mark ring. Does nothing if mark ring is empty."
    (when mark-ring
      (setq mark-ring (cons (copy-marker (mark-marker)) mark-ring))
      (set-marker (mark-marker) (car (last mark-ring)) (current-buffer))
      (when (null (mark t)) (ding))
      (setq mark-ring (nbutlast mark-ring))
      (goto-char (marker-position (car (last mark-ring))))))

  (defun push-mark ()
    (interactive)
    (set-mark-command nil)
    (set-mark-command nil))

  (nougat-hydra hydra-mark (:color pink)
    ("Mark"
     (("m" push-mark "mark here")
      ("p" (lambda () (interactive) (set-mark-command '(4))) "previous")
      ("n" (lambda () (interactive) (unpop-to-mark-command)) "next")
      ("c" (lambda () (interactive) (setq mark-ring nil)) "clear"))))
#+end_src

** hydra-projectile
#+begin_src emacs-lisp
  (defun projectile-readme ()
      (interactive)
      (let ((file-name (-find (lambda (f) (s-matches? "^readme" f))
                              (projectile-current-project-files))))
        (find-file (concat (projectile-project-root) "/" file-name))))

  (use-package helm-projectile :demand t
    :config
    (defun projectile-dwim ()
      (interactive)
      (if (string= "-" (projectile-project-name))
          (helm-projectile-switch-project)
        (hydra-projectile/body)))

    (nougat-hydra hydra-projectile (:color blue)
      ("Open"
       (("f" (helm-projectile-find-file-dwim) "file")
        ("p" (helm-projectile-switch-project) "project")
        ("b" (helm-projectile-switch-to-buffer) "buffer")
        ("w" (hydra-treemacs/body) "workspace"))
       "Do"
       (("s" (call-interactively 'helm-projectile-ag) "search")
        ("c" (org-projectile-helm-template-or-project) "capture"))
       "Cache"
       (("C" projectile-invalidate-cache "clear")
        ("x" (projectile-remove-known-project) "remove project")
        ("X" (projectile-cleanup-known-projects) "cleanup")))))
#+end_src

** hydra-registers
#+begin_src emacs-lisp
  (nougat-hydra hydra-registers (:color pink)
    ("Point"
     (("r" point-to-register "save point")
      ("j" jump-to-register "jump")
      ("v" view-register "view all"))
     "Text"
     (("c" copy-to-register "copy region")
      ("C" copy-rectangle-to-register "copy rect")
      ("i" insert-register "insert")
      ("p" prepend-to-register "prepend")
      ("a" append-to-register "append"))
     "Macros"
     (("m" kmacro-to-register "store")
      ("e" jump-to-register "execute"))))

#+end_src

** hydra-window
#+begin_src emacs-lisp
  (use-package ace-window)
  (winner-mode 1)

  (nougat-hydra hydra-window (:color red)
    ("Jump"
     (("h" windmove-left "left")
      ("l" windmove-right "right")
      ("k" windmove-up "up")
      ("j" windmove-down "down")
      ("a" ace-select-window "ace"))
     "Split"
     (("q" split-window-right "left")
      ("r" (progn (split-window-right) (call-interactively 'other-window)) "right")
      ("e" split-window-below "up")
      ("w" (progn (split-window-below) (call-interactively 'other-window)) "down"))
     "Do"
     (("d" delete-window "delete")
      ("o" delete-other-windows "delete others")
      ("u" winner-undo "undo")
      ("R" winner-redo "redo")
      ("t" nougat-hydra-toggle-window "toggle"))))
#+end_src

*** Toggle Window Split
#+begin_src emacs-lisp
(defun my/toggle-window-split (&optional arg)
    "Switch between 2 windows split horizontally or vertically.
    With ARG, swap them instead."
    (interactive "P")
    (unless (= (count-windows) 2)
      (user-error "Not two windows"))
    ;; Swap two windows
    (if arg
        (let ((this-win-buffer (window-buffer))
              (next-win-buffer (window-buffer (next-window))))
          (set-window-buffer (selected-window) next-win-buffer)
          (set-window-buffer (next-window) this-win-buffer))
      ;; Swap between horizontal and vertical splits
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

#+end_src

** hydra-yank-pop
#+begin_src emacs-lisp
  (nougat-hydra hydra-yank-pop (:color red)
    ("Yank/Pop"
     (("y" (yank-pop 1) "previous")
      ("Y" (yank-pop -1) "next")
      ("l" helm-show-kill-ring "list" :color blue))))

  (global-set-key
   (kbd "C-y")
   (lambda () (interactive) (yank) (hydra-yank-pop/body)))
#+end_src

** hydra-zoom
#+begin_src emacs-lisp
  (nougat-hydra hydra-zoom (:color red)
    ("Zoom"
     (("i" text-scale-increase "in")
      ("o" text-scale-decrease "out"))))
#+end_src

** emacs-lisp
#+begin_src emacs-lisp
  (nougat-hydra hydra-elisp (:color blue :major-mode emacs-lisp-mode)
    ("Execute"
     (("d" eval-defun "defun")
      ("b" eval-current-buffer "buffer")
      ("r" eval-region "region"))
     "Debug"
     (("D" edebug-defun "defun")
      ("a" edebug-all-defs "all definitions" :color red)
      ("A" edebug-all-forms "all forms" :color red))))
#+end_src

** org-mode
*** hydra-org-goto-first-sibling
#+begin_src emacs-lisp
  (defun hydra-org-goto-first-sibling () (interactive)
         (org-backward-heading-same-level 99999999))
#+end_src

*** hydra-org-goto-last-sibling
#+begin_src emacs-lisp
  (defun hydra-org-goto-last-sibling () (interactive)
         (org-forward-heading-same-level 99999999))
#+end_src

*** hydra-org-parent-level
#+begin_src emacs-lisp
  (defun hydra-org-parent-level ()
    (interactive)
    (let ((o-point (point)))
      (if (save-excursion
            (beginning-of-line)
            (looking-at org-heading-regexp))
          (progn
            (call-interactively 'outline-up-heading)
            (org-cycle-internal-local))
        (progn
          (call-interactively 'org-previous-visible-heading)
          (org-cycle-internal-local)))
      (when (and (/= o-point (point))
                 org-tidy-p)
        (call-interactively 'hydra-org-tidy))))

 #+end_src

*** hydra-org-child-level
#+begin_src emacs-lisp
  (defun hydra-org-child-level ()
    (interactive)
    (org-show-entry)
    (org-show-children)
    (when (not (org-goto-first-child))
      (when (save-excursion
              (beginning-of-line)
              (looking-at org-heading-regexp))
        (next-line))))
#+end_src

*** hydra-org
 #+begin_src emacs-lisp
   (require 'helm-org)
   (nougat-hydra hydra-org (:color red :major-mode org-mode)
     ("Shift"
      (("K" org-move-subtree-up "up")
       ("J" org-move-subtree-down "down")
       ("h" org-promote-subtree "promote")
       ("l" org-demote-subtree "demote"))
      "Travel"
      (("p" org-backward-heading-same-level "backward")
       ("n" org-forward-heading-same-level "forward")
       ("j" hydra-org-child-level "to child")
       ("k" hydra-org-parent-level "to parent")
       ("a" hydra-org-goto-first-sibling "first sibling")
       ("e" hydra-org-goto-last-sibling "last sibling"))
      "Perform"
      (("b" helm-org-in-buffer-headings "browse")
       ("r" (lambda () (interactive)
              (helm-org-rifle-current-buffer)
              (call-interactively 'org-cycle)
              (call-interactively 'org-cycle)) "rifle")
       ("v" avy-org-goto-heading-timer "avy")
       ("L" org-toggle-link-display "toggle links"))))
#+end_src

** hydra-brain
#+begin_src emacs-lisp
  (nougat-hydra hydra-brain (:color red :major-mode org-brain-visualize-mode)
    (
     "View"
     (("m" org-brain-visualize-mind-map "mind-map"))
     "Navigate"
     (("DEL" org-brain-visualize-back "back")
      ("j" backward-button "backward")
      ("k" forward-button "forward"))
     ))
#+end_src

*** Toggle Window Split
#+begin_src emacs-lisp
(defun my/toggle-window-split (&optional arg)
    "Switch between 2 windows split horizontally or vertically.
    With ARG, swap them instead."
    (interactive "P")
    (unless (= (count-windows) 2)
      (user-error "Not two windows"))
    ;; Swap two windows
    (if arg
        (let ((this-win-buffer (window-buffer))
              (next-win-buffer (window-buffer (next-window))))
          (set-window-buffer (selected-window) next-win-buffer)
          (set-window-buffer (next-window) this-win-buffer))
      ;; Swap between horizontal and vertical splits
      (let* ((this-win-buffer (window-buffer))
             (next-win-buffer (window-buffer (next-window)))
             (this-win-edges (window-edges (selected-window)))
             (next-win-edges (window-edges (next-window)))
             (this-win-2nd (not (and (<= (car this-win-edges)
                                         (car next-win-edges))
                                     (<= (cadr this-win-edges)
                                         (cadr next-win-edges)))))
             (splitter
              (if (= (car this-win-edges)
                     (car (window-edges (next-window))))
                  'split-window-horizontally
                'split-window-vertically)))
        (delete-other-windows)
        (let ((first-win (selected-window)))
          (funcall splitter)
          (if this-win-2nd (other-window 1))
          (set-window-buffer (selected-window) this-win-buffer)
          (set-window-buffer (next-window) next-win-buffer)
          (select-window first-win)
          (if this-win-2nd (other-window 1))))))

#+end_src

* treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :demand t
    :config (progn
            (setq treemacs-width 25)
            (global-set-key (kbd "M-<f12>") 'treemacs)
            (define-key treemacs-mode-map [mouse-1] #'treemacs-single-click-expand-action)
            (setq treemacs-project-follow-cleanup t)
            (setq treemacs-is-never-other-window t)))

  (setq treemacs-icon-open-png   (propertize "⊖ " 'face 'treemacs-directory-face)
        treemacs-icon-closed-png (propertize "⊕ " 'face 'treemacs-directory-face))

  (use-package treemacs-projectile)
  (use-package treemacs-magit)
#+end_src

** Hydra
#+begin_src emacs-lisp
  (nougat-hydra hydra-treemacs (:color red)
    ("Workspace"
     (("o" treemacs-switch-workspace "open")
      ("n" treemacs-create-workspace "new")
      ("k" treemacs-delete-workspace "kill")
      ("r" treemacs-rename-workspace "rename"))))
#+end_src

* elfeed
** boilerplate
#+begin_src emacs-lisp
    (defun advice-unadvice (sym)
      "Remove all advices from symbol SYM."
      (interactive "aFunction symbol: ")
      (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))

    (defun elfeed-font-size-hook ()
      (buffer-face-set '(:height 1.35)))

    (defun elfeed-visual-fill-hook ()
      (visual-fill-column-mode--enable))

    (defun elfeed-show-refresh-advice (entry)
      (elfeed-font-size-hook)
      (visual-fill-column-mode 1)
      (setq word-wrap 1)
      (elfeed-show-refresh))

    (defun elfeed-show ()
      (interactive)
      (elfeed)
      (delete-other-windows))
#+end_src

** setup
#+begin_src emacs-lisp
  (use-package elfeed
    :bind (("C-x w" . elfeed-show))
    :config
    (add-hook 'elfeed-search-update-hook 'elfeed-font-size-hook)
    (advice-unadvice 'elfeed-show-entry)
    (advice-add 'elfeed-show-entry :after 'elfeed-show-refresh-advice))

  (use-package elfeed-org
    :after (elfeed)
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list (my/org-file-name "notes.org"))))
#+end_src

* misc
Miscellaneous packages that don't really need their own section.
** demo-it
#+begin_src emacs-lisp
  (use-package demo-it
    :straight (demo-it :type git :host github :repo "howardabrams/demo-it"))
#+end_src

** gist
#+begin_src emacs-lisp
  (use-package gist
    :straight (gist :type git :host github :repo "defunkt/gist.el"))


  (nougat-hydra hydra-gist (:color blue)
    ("Gist" (("p" (gist-region-or-buffer) "public")
             ("P" (gist-region-or-buffer-private) "private")
             ("b" (browse-url "https://gist.github.com/dustinlacewell") "browse"))))

#+end_src

** poker.el
#+begin_src emacs-lisp
  (use-package poker
    :straight (poker :type git :host github :repo "mlang/poker.el"))
#+end_src

* entrypoint
** ep-notes-file
#+begin_src emacs-lisp
  (setq ep-notes-file (my/org-file-name "notes.org"))
#+end_src

** ep-notes-find-file
#+begin_src emacs-lisp
  (defun ep-notes-find-file () (find-file ep-notes-file))
#+end_src

** ep-notes-visit
#+begin_src emacs-lisp
  (defun ep-notes-visit (&rest olp) (org-olp-visit ep-notes-file olp))
  ;; (ep-notes-visit "Workiva" "Runbooks")
#+end_src

** ep-notes-select-then-visit
#+begin_src emacs-lisp
  (defun ep-notes-select-then-visit (&rest olp) (org-olp-select-then-visit ep-notes-file olp))
  ;; (ep-notes-select-then-visit "Workiva" "Tasks")
#+end_src

** bookmarks
#+begin_src emacs-lisp
  (nougat-hydra hydra-bookmarks (:color blue)
    ("Bookmarks" (("n" (linkmarks-capture) "new")
                  ("b" (linkmarks-select) "browse")
                  ("e" (find-file my/bookmarks-file-name)))))
#+end_src

** hydra-default
#+begin_src emacs-lisp
  (require 'org-olp)

  (nougat-hydra hydra-tasks (:color blue)
    ("Todos"
     (("t" (visit-candidate my/notes-file-name '(todo "TODO")) "todo")
      ("d" (visit-candidate my/notes-file-name '(todo "DOING")) "doing")
      ("D" (visit-candidate my/notes-file-name '(todo "DONE")) "done"))))

  (nougat-hydra hydra-notes (:color blue)
    ("Notes"
     (("f" (org-olp-find my/notes-file-name) "find")
      ("t" (hera-push 'hydra-tasks/body) "tasks")
      ("p" (org-olp-visit
            my/notes-file-name
            '("Software" "Emacs" "Packages")) "emacs packages"))))

  (nougat-hydra hydra-default (:color blue)
    ("Open"
     (("a" (org-agenda nil "a") "agenda")
      ("p" (hera-push 'hydra-projectile/body) "projectile")
      ("c" (org-capture) "capture")
      ("b" (hera-push 'hydra-bookmarks/body) "bookmarks"))
     "Emacs"
     (("h" (hera-push 'hydra-help/body) "help")
      ("m" (hera-push 'hydra-mark/body) "mark")
      ("w" (hera-push 'hydra-window/body) "windows")
      ("z" (hera-push 'hydra-zoom/body) "zoom")
      ("r" (hera-push 'hydra-registers/body) "registers"))
     "Misc"
     (("n" (hera-push 'hydra-notes/body) "notes")
      ("g" (hera-push 'hydra-gist/body) "gist")
      ("B" org-brain-visualize "brain")
      ("l" (progn (setq this-command 'sutysisku-search-helm)
                  (call-interactively 'sutysisku-search-helm)) "lojban"))))

  ;; (defhydra hydra-default (:color blue :hint nil)
  ;;   "

  ;;             Entrypoint Hydra

  ;; "
  ;;   ("a" (org-agenda nil "a") "agenda" :column "Open")
  ;;   ("p" (hera-push 'hydra-projectile/body) "projectile")
  ;;   ("c" (org-capture) "capture")
  ;;   ("b" (hera-push 'hydra-bookmarks/body) "bookmarks")
  ;;   ("h" (hera-push 'hydra-help/body) "help" :column "Emacs")
  ;;   ("m" (hera-push 'hydra-mark/body) "mark")
  ;;   ("w" (hera-push 'hydra-window/body) "windows")
  ;;   ("z" (hera-push 'hydra-zoom/body) "zoom")
  ;;   ("R" (hera-push 'hydra-registers/body) "registers")
  ;;   ("n" (hera-push 'hydra-notes/body) "notes" :column "Misc")
  ;;   ("s" (call-interactively 'helm-imenu) "semantic")
  ;;   ("g" (hera-push 'hydra-gist/body) "gist")
  ;;   ("b" (call-interactively 'org-brain-visualize) "brain")
  ;;   ("l" (progn (setq this-command 'sutysisku-search-helm)
  ;;               (call-interactively 'sutysisku-search-helm)) "lojban"))
#+end_src

* linux configuration
** preamble
#+begin_src emacs-lisp
  (when (string-equal system-type "gnu/linux")
#+end_src

** nixos
NixOS' ZSH module drops some PATH modification stuff in =~/.config/zsh/.zshrc=
which causes the following message on startup:

#+begin_src
  You appear to be setting environment variables ("PATH") in your .bashrc or .zshrc:
  those files are only read by interactive shells, so you should instead set
  environment variables in startup files like .profile, .bash_profile or .zshenv.
  Refer to your shell's man page for more info.

  Customize `exec-path-from-shell-arguments` to remove "-i" when done, or disable
  `exec-path-from-shell-check-startup-files` to disable this message.
#+end_src

The following line prevents the warning above:

#+begin_src emacs-lisp
  (setq exec-path-from-shell-check-startup-files nil)
#+end_src

** aesthetics
*** theme

#+begin_src emacs-lisp
  (load-file "/home/ldlework/.emacs.d/theme.el")
  (enable-theme 'xresources)
#+end_src

**** Automatically update theme

#+begin_src emacs-lisp
  (defun theme-callback (event)
    (load-file "~/.config/wpg/formats/theme.el")
    (set-eyeliner-colors)
    (eyeliner/install)
    (enable-theme 'xresources))

  (require 'filenotify)
  (setq theme-watch-handle
        (file-notify-add-watch
         "/home/ldlework/.config/wpg/formats/theme.el" '(change) 'theme-callback))
#+end_src

*** default font
#+begin_src emacs-lisp
  (setq powerline-height 32)
  (set-face-attribute 'default nil :family "Source Code Pro" :weight 'light)
#+end_src

*** unicode fonts
#+begin_src emacs-lisp
  (use-package unicode-fonts
    :config
    (unicode-fonts-setup)
    (set-face-attribute 'default nil :font "Source Code Pro")
    ;(set-fontset-font "fontset-default" 'unicode "Consolas" nil)
    (set-fontset-font "fontset-default" 'unicode "DejaVu Sans Mono" nil)
    (set-fontset-font "fontset-default" 'unicode "Symbola" nil)
   )
#+end_src

** core
*** minor modes
**** ispell-minor-mode
#+begin_src emacs-lisp
  (setq ispell-program-name (concat my/home-directory ".nix-profile/bin/aspell"))
#+end_src

*** backup every save
#+BEGIN_SRC emacs-lisp
  (use-package backup-each-save
    :config (add-hook 'after-save-hook 'backup-each-save))
#+END_SRC

** org
*** look
**** theme customizations
#+begin_src emacs-lisp
  (use-package org-beautify-theme
    :after (org)
    :config
    (setq org-fontify-whole-heading-line t)
    (setq org-fontify-quote-and-verse-blocks t)
    (setq org-hide-emphasis-markers t))
#+end_src

** language support
*** python
**** jedi
[[https://github.com/tkf/emacs-jedi][Jedi]] is an auto-completion server for Python.
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :init
    (progn
      (add-hook 'python-mode-hook 'jedi:setup)
      (setq jedi:complete-on-dot t)))
#+END_SRC

*** typescript
**** tide
#+begin_src emacs-lisp
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      (company-mode +1))

    (use-package tide
      :config
      (add-hook 'before-save-hook 'tide-format-before-save)
      (add-hook 'typescript-mode-hook #'setup-tide-mode)
      (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
      (add-hook 'web-mode-hook
                (lambda ()
                  (when (string-equal "tsx" (file-name-extension buffer-file-name))
                    (setup-tide-mode))))
      (flycheck-add-mode 'typescript-tslint 'web-mode))
#+end_src

*** f#
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'fsharp-mode
    (add-to-list 'exec-path "/nix/var/nix/profiles/default/bin")
    (add-to-list 'exec-path (expand-file-name "~/.nix-profile/bin"))
    (add-to-list 'auto-mode-alist '("\\.fs[iylx]?$" . fsharp-mode)))
#+END_SRC

** helm
*** theme customizations
#+begin_src emacs-lisp
  (set-face-attribute
   'helm-selection nil
   :inherit t
   :background (theme-color 'blue)
   :foreground (theme-color 'background)
   :height 1.0
   :weight 'ultra-bold
   :inverse-video nil)

  (set-face-attribute
   'helm-source-header nil
   :inherit nil
   :underline nil
   :background (theme-color 'background)
   :foreground (theme-color 'light-red)
   :height 1.9)

  (set-face-attribute
   'helm-header nil
   :inherit nil
   :height 0.8
   :background (theme-color 'background)
   :foreground (theme-color 'cyan))

  (set-face-attribute
   'helm-separator nil
   :height 0.8
   :foreground (theme-color 'light-red))

  (set-face-attribute
   'helm-match nil
   :weight 'bold
   :foreground (theme-color 'green))

#+end_src

** postamble
#+begin_src emacs-lisp
  (enable-theme 'xresources)

  )
#+end_src

* windows configuration
** preamble
#+begin_src emacs-lisp
  (when (string-equal system-type "windows-nt")
#+end_src

** theme
#+begin_src emacs-lisp
  (use-package dracula-theme)
#+end_src

** postamble
#+begin_src emacs-lisp
  )
#+end_src

